//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.battle
{

public sealed partial class BuffData :  Bright.Config.BeanBase 
{
    public BuffData(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Sequence = _buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        Type = (buff.BuffType)_buf.ReadInt();
        Attribute = _buf.ReadInt();
        AttachVfx = _buf.ReadInt();
        EffectVfx = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Effect = new System.Collections.Generic.List<buff.BuffEffect>(n);for(var i = 0 ; i < n ; i++) { buff.BuffEffect _e;  _e = buff.BuffEffect.DeserializeBuffEffect(_buf); Effect.Add(_e);}}
        PostInit();
    }

    public static BuffData DeserializeBuffData(ByteBuf _buf)
    {
        return new battle.BuffData(_buf);
    }

    /// <summary>
    /// buff id<br/>自动生成<br/>不需要手动填写<br/>引用buff时使用此Id<br/><br/>buff Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 编号从1开始<br/><br/>buff 序号
    /// </summary>
    public int Sequence { get; private set; }
    /// <summary>
    /// buff name
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// buff description
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 此配置文件只填写 Buff<br/><br/>buff 类型 
    /// </summary>
    public buff.BuffType Type { get; private set; }
    /// <summary>
    /// buff 属性
    /// </summary>
    public int Attribute { get; private set; }
    /// <summary>
    /// 目标带有此buff时，会一直携带这个特效，特效需要是循环播放的<br/><br/>buff 伴随特效
    /// </summary>
    public int AttachVfx { get; private set; }
    public battle.VFXData AttachVfx_Ref { get; private set; }
    /// <summary>
    /// 每当buff生效的时候，就播放一次这个特效，根据buff的效果类型决定生效时机<br/><br/>buff 生效特效
    /// </summary>
    public int EffectVfx { get; private set; }
    public battle.VFXData EffectVfx_Ref { get; private set; }
    /// <summary>
    /// buff效果
    /// </summary>
    public System.Collections.Generic.List<buff.BuffEffect> Effect { get; private set; }

    public const int __ID__ = 163161907;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.AttachVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(AttachVfx);
        this.EffectVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(EffectVfx);
        foreach(var _e in Effect) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Effect) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Sequence:" + Sequence + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "Type:" + Type + ","
        + "Attribute:" + Attribute + ","
        + "AttachVfx:" + AttachVfx + ","
        + "EffectVfx:" + EffectVfx + ","
        + "Effect:" + Bright.Common.StringUtil.CollectionToString(Effect) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
