//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.battle
{

public sealed partial class CharacterData :  Bright.Config.BeanBase 
{
    public CharacterData(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Kill = _buf.ReadInt();
        Relive = _buf.ReadInt();
        Harm = _buf.ReadInt();
        Heal = _buf.ReadInt();
        Debuff = _buf.ReadInt();
        Dispel = _buf.ReadInt();
        Buff = _buf.ReadInt();
        PostInit();
    }

    public static CharacterData DeserializeCharacterData(ByteBuf _buf)
    {
        return new battle.CharacterData(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 行为优先级 1 - n, 填0表示关闭这个行为<br/>优先级数值越小，优先级越高<br/><br/>行为优先级: 杀死目标
    /// </summary>
    public int Kill { get; private set; }
    /// <summary>
    /// 行为优先级: 复活目标
    /// </summary>
    public int Relive { get; private set; }
    /// <summary>
    /// 行为优先级:造成伤害
    /// </summary>
    public int Harm { get; private set; }
    /// <summary>
    /// 行为优先级:造成恢复
    /// </summary>
    public int Heal { get; private set; }
    /// <summary>
    /// 行为优先级:施加异常状态
    /// </summary>
    public int Debuff { get; private set; }
    /// <summary>
    /// 行为优先级:清除异常状态
    /// </summary>
    public int Dispel { get; private set; }
    /// <summary>
    /// 行为优先级:施放有益状态
    /// </summary>
    public int Buff { get; private set; }

    public const int __ID__ = 812809117;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Kill:" + Kill + ","
        + "Relive:" + Relive + ","
        + "Harm:" + Harm + ","
        + "Heal:" + Heal + ","
        + "Debuff:" + Debuff + ","
        + "Dispel:" + Dispel + ","
        + "Buff:" + Buff + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
