//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.map
{

/// <summary>
/// 地图上的Npc刷新点信息
/// </summary>
public sealed partial class NpcRefreshInfo :  Bright.Config.BeanBase 
{
    public NpcRefreshInfo(ByteBuf _buf) 
    {
        NpcInfoId = _buf.ReadInt();
        Position = _buf.ReadUnityVector3();
        Rotation = _buf.ReadUnityVector3();
        NpcTempId = _buf.ReadInt();
        Behaviour = (common.NpcBehaviour)_buf.ReadInt();
        BehaviourParam = _buf.ReadUnityVector3();
        AttackMode = (common.NpcAttackMode)_buf.ReadInt();
        ScanRadius = _buf.ReadFloat();
        RefreshInterval = _buf.ReadFloat();
        PostInit();
    }

    public static NpcRefreshInfo DeserializeNpcRefreshInfo(ByteBuf _buf)
    {
        return new map.NpcRefreshInfo(_buf);
    }

    /// <summary>
    /// 刷新点Id，地图唯一
    /// </summary>
    public int NpcInfoId { get; private set; }
    /// <summary>
    /// 刷新点在地图上的坐标
    /// </summary>
    public UnityEngine.Vector3 Position { get; private set; }
    /// <summary>
    /// 刷新点旋转角度
    /// </summary>
    public UnityEngine.Vector3 Rotation { get; private set; }
    /// <summary>
    /// Npc模板ID,对应NpcTemplateData中的Id
    /// </summary>
    public int NpcTempId { get; private set; }
    public common.NpcTemplateData NpcTempId_Ref { get; private set; }
    /// <summary>
    /// npc行为
    /// </summary>
    public common.NpcBehaviour Behaviour { get; private set; }
    /// <summary>
    /// Npc行为参数，如果行为是巡逻，此值为指定的巡逻点，如果行为是随机，此值的x值为随机半径
    /// </summary>
    public UnityEngine.Vector3 BehaviourParam { get; private set; }
    /// <summary>
    /// Npc攻击模式，被动or主动
    /// </summary>
    public common.NpcAttackMode AttackMode { get; private set; }
    /// <summary>
    /// Npc的扫敌半径，主动攻击时有效
    /// </summary>
    public float ScanRadius { get; private set; }
    /// <summary>
    /// Npc死亡后的刷新时间，单位秒
    /// </summary>
    public float RefreshInterval { get; private set; }

    public const int __ID__ = 1292236666;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.NpcTempId_Ref = (_tables["common.NpcTemplateDatas"] as common.NpcTemplateDatas).GetOrDefault(NpcTempId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "NpcInfoId:" + NpcInfoId + ","
        + "Position:" + Position + ","
        + "Rotation:" + Rotation + ","
        + "NpcTempId:" + NpcTempId + ","
        + "Behaviour:" + Behaviour + ","
        + "BehaviourParam:" + BehaviourParam + ","
        + "AttackMode:" + AttackMode + ","
        + "ScanRadius:" + ScanRadius + ","
        + "RefreshInterval:" + RefreshInterval + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
