//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.map
{

public sealed partial class MapData :  Bright.Config.BeanBase 
{
    public MapData(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Size = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); Size[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);GridConfig = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); GridConfig[i] = _e;}}
        PlayerMax = _buf.ReadInt();
        Bgm = _buf.ReadInt();
        BattleBgm = _buf.ReadInt();
        LevelMin = _buf.ReadInt();
        LevelMax = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Portals = new System.Collections.Generic.List<map.Protal>(n);for(var i = 0 ; i < n ; i++) { map.Protal _e;  _e = map.Protal.DeserializeProtal(_buf); Portals.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Npcs = new System.Collections.Generic.List<map.NpcRefreshInfo>(n);for(var i = 0 ; i < n ; i++) { map.NpcRefreshInfo _e;  _e = map.NpcRefreshInfo.DeserializeNpcRefreshInfo(_buf); Npcs.Add(_e);}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Monsters = new System.Collections.Generic.List<map.NpcRefreshInfo>(n);for(var i = 0 ; i < n ; i++) { map.NpcRefreshInfo _e;  _e = map.NpcRefreshInfo.DeserializeNpcRefreshInfo(_buf); Monsters.Add(_e);}}
        Resources = _buf.ReadString();
        PostInit();
    }

    public static MapData DeserializeMapData(ByteBuf _buf)
    {
        return new map.MapData(_buf);
    }

    /// <summary>
    /// 地图id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 地图名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 地图宽高
    /// </summary>
    public int[] Size { get; private set; }
    /// <summary>
    /// 地图分块设置
    /// </summary>
    public int[] GridConfig { get; private set; }
    /// <summary>
    /// 玩家上限
    /// </summary>
    public int PlayerMax { get; private set; }
    /// <summary>
    /// 地图bgm
    /// </summary>
    public int Bgm { get; private set; }
    public common.AudioConfig Bgm_Ref { get; private set; }
    /// <summary>
    /// 战斗bgm
    /// </summary>
    public int BattleBgm { get; private set; }
    public common.AudioConfig BattleBgm_Ref { get; private set; }
    /// <summary>
    /// 地图最小级别
    /// </summary>
    public int LevelMin { get; private set; }
    /// <summary>
    /// 地图最大级别
    /// </summary>
    public int LevelMax { get; private set; }
    /// <summary>
    /// 地图上的传送门
    /// </summary>
    public System.Collections.Generic.List<map.Protal> Portals { get; private set; }
    /// <summary>
    /// 地图上的npc刷新点
    /// </summary>
    public System.Collections.Generic.List<map.NpcRefreshInfo> Npcs { get; private set; }
    /// <summary>
    /// 地图上的怪物刷新点
    /// </summary>
    public System.Collections.Generic.List<map.NpcRefreshInfo> Monsters { get; private set; }
    /// <summary>
    /// 地图上的资源点
    /// </summary>
    public string Resources { get; private set; }

    public const int __ID__ = 313207924;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.Bgm_Ref = (_tables["common.AudioConfigs"] as common.AudioConfigs).GetOrDefault(Bgm);
        this.BattleBgm_Ref = (_tables["common.AudioConfigs"] as common.AudioConfigs).GetOrDefault(BattleBgm);
        foreach(var _e in Portals) { _e?.Resolve(_tables); }
        foreach(var _e in Npcs) { _e?.Resolve(_tables); }
        foreach(var _e in Monsters) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Portals) { _e?.TranslateText(translator); }
        foreach(var _e in Npcs) { _e?.TranslateText(translator); }
        foreach(var _e in Monsters) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Size:" + Bright.Common.StringUtil.CollectionToString(Size) + ","
        + "GridConfig:" + Bright.Common.StringUtil.CollectionToString(GridConfig) + ","
        + "PlayerMax:" + PlayerMax + ","
        + "Bgm:" + Bgm + ","
        + "BattleBgm:" + BattleBgm + ","
        + "LevelMin:" + LevelMin + ","
        + "LevelMax:" + LevelMax + ","
        + "Portals:" + Bright.Common.StringUtil.CollectionToString(Portals) + ","
        + "Npcs:" + Bright.Common.StringUtil.CollectionToString(Npcs) + ","
        + "Monsters:" + Bright.Common.StringUtil.CollectionToString(Monsters) + ","
        + "Resources:" + Resources + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
