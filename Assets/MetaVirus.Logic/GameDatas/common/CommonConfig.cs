//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.common
{

public sealed partial class CommonConfig :  Bright.Config.BeanBase 
{
    public CommonConfig(ByteBuf _buf) 
    {
        PlayerInteractiveDistance = _buf.ReadFloat();
        PlayerEnterBattleDistance = _buf.ReadFloat();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);VfxCommon = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); VfxCommon[i] = _e;}}
        VfxMeleeHitDefault = _buf.ReadInt();
        VfxMagicHitDefaut = _buf.ReadInt();
        VfxHealHitDefault = _buf.ReadInt();
        BattleProjectileSpeed = _buf.ReadFloat();
        BattleHeadupDistance = _buf.ReadFloat();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BattleColorHpInc = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); BattleColorHpInc[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BattleColorHpDec = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); BattleColorHpDec[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BattleUiHpBarCololr = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); BattleUiHpBarCololr[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BattleUiMpBarCololr = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); BattleUiMpBarCololr[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorWhite = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorWhite[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorGreen = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorGreen[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorBlue = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorBlue[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorPurple = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorPurple[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorOrange = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorOrange[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);ItemQualityColorRed = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); ItemQualityColorRed[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);MonsterLevelupTable = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); MonsterLevelupTable[i] = _e;}}
        PostInit();
    }

    public static CommonConfig DeserializeCommonConfig(ByteBuf _buf)
    {
        return new common.CommonConfig(_buf);
    }

    /// <summary>
    /// 玩家和npc交互的距离
    /// </summary>
    public float PlayerInteractiveDistance { get; private set; }
    /// <summary>
    /// 玩家和npc进入战斗的距离
    /// </summary>
    public float PlayerEnterBattleDistance { get; private set; }
    /// <summary>
    /// 通用特效id范围，每2个id为一组，可以是多个组，id之间用|分割
    /// </summary>
    public int[] VfxCommon { get; private set; }
    /// <summary>
    /// 肉搏攻击的默认命中特效id
    /// </summary>
    public int VfxMeleeHitDefault { get; private set; }
    /// <summary>
    /// 魔法攻击的默认命中特效id
    /// </summary>
    public int VfxMagicHitDefaut { get; private set; }
    /// <summary>
    /// 恢复魔法的默认命中特效id
    /// </summary>
    public int VfxHealHitDefault { get; private set; }
    /// <summary>
    /// 战斗中投射物的默认移动速度，单位 m/s
    /// </summary>
    public float BattleProjectileSpeed { get; private set; }
    /// <summary>
    /// 战斗单位头顶施放法术与地面的的距离
    /// </summary>
    public float BattleHeadupDistance { get; private set; }
    /// <summary>
    /// 战斗中hp增长颜色
    /// </summary>
    public int[] BattleColorHpInc { get; private set; }
    /// <summary>
    /// 战斗中hp减少颜色
    /// </summary>
    public int[] BattleColorHpDec { get; private set; }
    /// <summary>
    /// 战斗ui hpbar 颜色
    /// </summary>
    public int[] BattleUiHpBarCololr { get; private set; }
    /// <summary>
    /// 战斗ui mpbar 颜色
    /// </summary>
    public int[] BattleUiMpBarCololr { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorWhite { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorGreen { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorBlue { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorPurple { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorOrange { get; private set; }
    /// <summary>
    /// 物品品质颜色
    /// </summary>
    public int[] ItemQualityColorRed { get; private set; }
    /// <summary>
    /// 怪物各品质对应的默认经验表(白|绿|蓝|紫|橙|红)
    /// </summary>
    public int[] MonsterLevelupTable { get; private set; }

    public const int __ID__ = -70039472;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "PlayerInteractiveDistance:" + PlayerInteractiveDistance + ","
        + "PlayerEnterBattleDistance:" + PlayerEnterBattleDistance + ","
        + "VfxCommon:" + Bright.Common.StringUtil.CollectionToString(VfxCommon) + ","
        + "VfxMeleeHitDefault:" + VfxMeleeHitDefault + ","
        + "VfxMagicHitDefaut:" + VfxMagicHitDefaut + ","
        + "VfxHealHitDefault:" + VfxHealHitDefault + ","
        + "BattleProjectileSpeed:" + BattleProjectileSpeed + ","
        + "BattleHeadupDistance:" + BattleHeadupDistance + ","
        + "BattleColorHpInc:" + Bright.Common.StringUtil.CollectionToString(BattleColorHpInc) + ","
        + "BattleColorHpDec:" + Bright.Common.StringUtil.CollectionToString(BattleColorHpDec) + ","
        + "BattleUiHpBarCololr:" + Bright.Common.StringUtil.CollectionToString(BattleUiHpBarCololr) + ","
        + "BattleUiMpBarCololr:" + Bright.Common.StringUtil.CollectionToString(BattleUiMpBarCololr) + ","
        + "ItemQualityColorWhite:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorWhite) + ","
        + "ItemQualityColorGreen:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorGreen) + ","
        + "ItemQualityColorBlue:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorBlue) + ","
        + "ItemQualityColorPurple:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorPurple) + ","
        + "ItemQualityColorOrange:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorOrange) + ","
        + "ItemQualityColorRed:" + Bright.Common.StringUtil.CollectionToString(ItemQualityColorRed) + ","
        + "MonsterLevelupTable:" + Bright.Common.StringUtil.CollectionToString(MonsterLevelupTable) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
