//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.skill
{

/// <summary>
/// 技能施放动作配置
/// </summary>
public sealed partial class CastAction :  Bright.Config.BeanBase 
{
    public CastAction(ByteBuf _buf) 
    {
        ActionName = (skill.UnitAnimationNames)_buf.ReadInt();
        AttachVfx = _buf.ReadInt();
        Projectile = _buf.ReadInt();
        HitVfx = _buf.ReadInt();
        GlobalVfx = _buf.ReadInt();
        PostInit();
    }

    public static CastAction DeserializeCastAction(ByteBuf _buf)
    {
        return new skill.CastAction(_buf);
    }

    /// <summary>
    /// 施放动作名称
    /// </summary>
    public skill.UnitAnimationNames ActionName { get; private set; }
    /// <summary>
    /// 伴随特效
    /// </summary>
    public int AttachVfx { get; private set; }
    public battle.VFXData AttachVfx_Ref { get; private set; }
    /// <summary>
    /// 投射物特效，绑定在投射物上
    /// </summary>
    public int Projectile { get; private set; }
    public battle.ProjectileData Projectile_Ref { get; private set; }
    /// <summary>
    /// 命中特效
    /// </summary>
    public int HitVfx { get; private set; }
    public battle.VFXData HitVfx_Ref { get; private set; }
    /// <summary>
    /// 群体命中特效，施加在目标阵型中心
    /// </summary>
    public int GlobalVfx { get; private set; }
    public battle.VFXData GlobalVfx_Ref { get; private set; }

    public const int __ID__ = 1522105906;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.AttachVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(AttachVfx);
        this.Projectile_Ref = (_tables["battle.ProjectileDatas"] as battle.ProjectileDatas).GetOrDefault(Projectile);
        this.HitVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(HitVfx);
        this.GlobalVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(GlobalVfx);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ActionName:" + ActionName + ","
        + "AttachVfx:" + AttachVfx + ","
        + "Projectile:" + Projectile + ","
        + "HitVfx:" + HitVfx + ","
        + "GlobalVfx:" + GlobalVfx + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
