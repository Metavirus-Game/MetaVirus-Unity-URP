//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.skill
{

/// <summary>
/// 技能附加效果
/// </summary>
public sealed partial class AttachEffect :  Bright.Config.BeanBase 
{
    public AttachEffect(ByteBuf _buf) 
    {
        Type = (skill.AttachEffectType)_buf.ReadInt();
        CalcSource = (skill.AttachEffectSource)_buf.ReadInt();
        CalcAttribute = (common.AttributeId)_buf.ReadInt();
        Value = skill.AtkValue.DeserializeAtkValue(_buf);
        Attribute = (skill.AtkAttribute)_buf.ReadInt();
        Target = (skill.AttachEffectTarget)_buf.ReadInt();
        AffectAttribute = (common.AttributeId)_buf.ReadInt();
        ActionName = (skill.UnitAnimationNames)_buf.ReadInt();
        HitVfx = _buf.ReadInt();
        PostInit();
    }

    public static AttachEffect DeserializeAttachEffect(ByteBuf _buf)
    {
        return new skill.AttachEffect(_buf);
    }

    /// <summary>
    /// 附加效果类型，伤害or恢复
    /// </summary>
    public skill.AttachEffectType Type { get; private set; }
    /// <summary>
    /// 附加效果计算属性来源，自身or目标，表示计算最终附加值时，从自身还是目标身上获取指定属性
    /// </summary>
    public skill.AttachEffectSource CalcSource { get; private set; }
    /// <summary>
    /// 技能附加效果计算属性，填0 根据附加效果属性决定是物理攻击力还是魔法攻击力，&gt;0表示参与计算的指定计算属性
    /// </summary>
    public common.AttributeId CalcAttribute { get; private set; }
    /// <summary>
    /// 附加效果值
    /// </summary>
    public skill.AtkValue Value { get; private set; }
    /// <summary>
    /// 附加效果属性
    /// </summary>
    public skill.AtkAttribute Attribute { get; private set; }
    /// <summary>
    /// 附加效果目标，自身or目标
    /// </summary>
    public skill.AttachEffectTarget Target { get; private set; }
    /// <summary>
    /// 附加效果影响属性，附加效果增加或扣减的属性id
    /// </summary>
    public common.AttributeId AffectAttribute { get; private set; }
    /// <summary>
    /// 附加效果攻击动作，无表示没有攻击动作
    /// </summary>
    public skill.UnitAnimationNames ActionName { get; private set; }
    /// <summary>
    /// 附加效果命中效果，0表示没有命中效果
    /// </summary>
    public int HitVfx { get; private set; }
    public battle.VFXData HitVfx_Ref { get; private set; }

    public const int __ID__ = 119721171;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        Value?.Resolve(_tables);
        this.HitVfx_Ref = (_tables["battle.VFXDatas"] as battle.VFXDatas).GetOrDefault(HitVfx);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        Value?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Type:" + Type + ","
        + "CalcSource:" + CalcSource + ","
        + "CalcAttribute:" + CalcAttribute + ","
        + "Value:" + Value + ","
        + "Attribute:" + Attribute + ","
        + "Target:" + Target + ","
        + "AffectAttribute:" + AffectAttribute + ","
        + "ActionName:" + ActionName + ","
        + "HitVfx:" + HitVfx + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
