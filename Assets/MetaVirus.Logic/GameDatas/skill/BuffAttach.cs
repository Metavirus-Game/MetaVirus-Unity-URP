//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.skill
{

/// <summary>
/// 技能附加状态
/// </summary>
public sealed partial class BuffAttach :  Bright.Config.BeanBase 
{
    public BuffAttach(ByteBuf _buf) 
    {
        AttachTime = (buff.BuffAttachTime)_buf.ReadInt();
        AttachTarget = (skill.AttachEffectTarget)_buf.ReadInt();
        CountMethod = (buff.BuffCountMethod)_buf.ReadInt();
        AttachCount = _buf.ReadInt();
        AttachProb = _buf.ReadFloat();
        BuffId = _buf.ReadInt();
        BuffLevel = _buf.ReadInt();
        PostInit();
    }

    public static BuffAttach DeserializeBuffAttach(ByteBuf _buf)
    {
        return new skill.BuffAttach(_buf);
    }

    /// <summary>
    /// 附加时机，技能施放前or技能命中后
    /// </summary>
    public buff.BuffAttachTime AttachTime { get; private set; }
    /// <summary>
    /// 附加对象，目标 or 自身
    /// </summary>
    public skill.AttachEffectTarget AttachTarget { get; private set; }
    /// <summary>
    /// 按回合数或生效次数
    /// </summary>
    public buff.BuffCountMethod CountMethod { get; private set; }
    /// <summary>
    /// 附加回合数或者层数
    /// </summary>
    public int AttachCount { get; private set; }
    /// <summary>
    /// 附加几率(0-1)，0表示根据命中属性计算，&gt;0表示根据实际几率值计算
    /// </summary>
    public float AttachProb { get; private set; }
    /// <summary>
    /// 附加BuffId
    /// </summary>
    public int BuffId { get; private set; }
    public battle.BuffData BuffId_Ref { get; private set; }
    /// <summary>
    /// 附加buff等级
    /// </summary>
    public int BuffLevel { get; private set; }

    public const int __ID__ = -776887211;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.BuffId_Ref = (_tables["battle.BuffDatas"] as battle.BuffDatas).GetOrDefault(BuffId);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "AttachTime:" + AttachTime + ","
        + "AttachTarget:" + AttachTarget + ","
        + "CountMethod:" + CountMethod + ","
        + "AttachCount:" + AttachCount + ","
        + "AttachProb:" + AttachProb + ","
        + "BuffId:" + BuffId + ","
        + "BuffLevel:" + BuffLevel + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
