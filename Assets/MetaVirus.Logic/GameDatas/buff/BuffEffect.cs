//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.buff
{

/// <summary>
/// Buff效果
/// </summary>
public sealed partial class BuffEffect :  Bright.Config.BeanBase 
{
    public BuffEffect(ByteBuf _buf) 
    {
        Level = _buf.ReadInt();
        EffectType = (buff.BuffEffectType)_buf.ReadInt();
        RelatedAttribute = (common.AttributeId)_buf.ReadInt();
        RelatedState = (common.BattleUnitState)_buf.ReadInt();
        CalcSource = (skill.AttachEffectSource)_buf.ReadInt();
        CalcAttribute = (common.AttributeId)_buf.ReadInt();
        EffectValue = skill.AtkValue.DeserializeAtkValue(_buf);
        EffectAttribute = (skill.AtkAttribute)_buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BanSkillTypes = new skill.SkillType[n];for(var i = 0 ; i < n ; i++) { skill.SkillType _e;_e = (skill.SkillType)_buf.ReadInt(); BanSkillTypes[i] = _e;}}
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);BanSkillIds = new int[n];for(var i = 0 ; i < n ; i++) { int _e;_e = _buf.ReadInt(); BanSkillIds[i] = _e;}}
        PostInit();
    }

    public static BuffEffect DeserializeBuffEffect(ByteBuf _buf)
    {
        return new buff.BuffEffect(_buf);
    }

    /// <summary>
    /// Buff等级
    /// </summary>
    public int Level { get; private set; }
    /// <summary>
    /// Buff效果类型
    /// </summary>
    public buff.BuffEffectType EffectType { get; private set; }
    /// <summary>
    /// Buff效果相关属性
    /// </summary>
    public common.AttributeId RelatedAttribute { get; private set; }
    /// <summary>
    /// Buff效果相关状态
    /// </summary>
    public common.BattleUnitState RelatedState { get; private set; }
    /// <summary>
    /// Buff效果计算来源
    /// </summary>
    public skill.AttachEffectSource CalcSource { get; private set; }
    /// <summary>
    /// Buff效果计算来源属性
    /// </summary>
    public common.AttributeId CalcAttribute { get; private set; }
    /// <summary>
    /// Buff附加效果值
    /// </summary>
    public skill.AtkValue EffectValue { get; private set; }
    /// <summary>
    /// Buff附加效果值属性
    /// </summary>
    public skill.AtkAttribute EffectAttribute { get; private set; }
    /// <summary>
    /// Buff效果为按类型禁止技能时，填写禁止的技能类型
    /// </summary>
    public skill.SkillType[] BanSkillTypes { get; private set; }
    /// <summary>
    /// Buff效果为按Id禁止技能时，填写禁止的技能id
    /// </summary>
    public int[] BanSkillIds { get; private set; }
    public battle.BattleSkillData[] BanSkillIds_Ref { get; private set; }

    public const int __ID__ = 732263519;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        EffectValue?.Resolve(_tables);
        { int __n = BanSkillIds.Length; battle.SkillDatas __table = (battle.SkillDatas)_tables["battle.SkillDatas"]; this.BanSkillIds_Ref = new battle.BattleSkillData[__n]; for(int i = 0 ; i < __n ; i++) { this.BanSkillIds_Ref[i] =  __table.GetOrDefault(BanSkillIds[i]); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        EffectValue?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Level:" + Level + ","
        + "EffectType:" + EffectType + ","
        + "RelatedAttribute:" + RelatedAttribute + ","
        + "RelatedState:" + RelatedState + ","
        + "CalcSource:" + CalcSource + ","
        + "CalcAttribute:" + CalcAttribute + ","
        + "EffectValue:" + EffectValue + ","
        + "EffectAttribute:" + EffectAttribute + ","
        + "BanSkillTypes:" + Bright.Common.StringUtil.CollectionToString(BanSkillTypes) + ","
        + "BanSkillIds:" + Bright.Common.StringUtil.CollectionToString(BanSkillIds) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
