//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;


namespace cfg
{
   
public partial class Tables
{
    /// <summary>
    /// 游戏通用配置
    /// </summary>
    public common.CommonConfigs CommonConfigs {get; }
    /// <summary>
    /// 游戏通用消息（服务器发给客户端的消息）
    /// </summary>
    public common.GameMessages GameMessages {get; }
    /// <summary>
    /// 定义主场景内的菜单项
    /// </summary>
    public common.GameMenus GameMenus {get; }
    /// <summary>
    /// 定义Npc资源(包括Npc和怪物)，对应的Unity资源地址为npc-res-id/id.prefab
    /// </summary>
    public common.NpcResourceDatas NpcResourceDatas {get; }
    /// <summary>
    /// 显示在地图上的Npc模板
    /// </summary>
    public common.NpcTemplateDatas NpcTemplateDatas {get; }
    /// <summary>
    /// 本地化数据
    /// </summary>
    public common.LocalizationDatas LocalizationDatas {get; }
    /// <summary>
    /// 音频资源配置表
    /// </summary>
    public common.AudioConfigs AudioConfigs {get; }
    /// <summary>
    /// 音频资源分类配置表
    /// </summary>
    public common.AudioCatalogs AudioCatalogs {get; }
    /// <summary>
    /// 道具表
    /// </summary>
    public common.GameItems GameItems {get; }
    /// <summary>
    /// npc功能类型表
    /// </summary>
    public common.NpcFunctionTypes NpcFunctionTypes {get; }
    /// <summary>
    /// npc功能表
    /// </summary>
    public common.NpcFunctionDatas NpcFunctionDatas {get; }
    /// <summary>
    /// 怪物类型(系)
    /// </summary>
    public common.MonsterTypes MonsterTypes {get; }
    /// <summary>
    /// 地图数据
    /// </summary>
    public map.MapDatas MapDatas {get; }
    /// <summary>
    /// 经验表
    /// </summary>
    public attr.LevelUpTables LevelUpTables {get; }
    /// <summary>
    /// 成长率配置表
    /// </summary>
    public attr.AttrGrowTables AttrGrowTables {get; }
    /// <summary>
    /// 阵型配置表
    /// </summary>
    public battle.FormationDatas FormationDatas {get; }
    /// <summary>
    /// 玩家可获得的宠物属性配置表
    /// </summary>
    public battle.PetDatas PetDatas {get; }
    /// <summary>
    /// 怪物属性配置表
    /// </summary>
    public battle.MonsterDatas MonsterDatas {get; }
    /// <summary>
    /// 怪物组配置表
    /// </summary>
    public battle.MonsterGroupDatas MonsterGroupDatas {get; }
    /// <summary>
    /// 技能配置表
    /// </summary>
    public battle.SkillDatas SkillDatas {get; }
    /// <summary>
    /// Buff，Debuff配置表
    /// </summary>
    public battle.BuffDatas BuffDatas {get; }
    /// <summary>
    /// 特效配置表
    /// </summary>
    public battle.VFXDatas VFXDatas {get; }
    /// <summary>
    /// 投射物配置表
    /// </summary>
    public battle.ProjectileDatas ProjectileDatas {get; }
    /// <summary>
    /// 怪物性格配置表
    /// </summary>
    public battle.CharacterDatas CharacterDatas {get; }
    /// <summary>
    /// Avatar身体配置数据
    /// </summary>
    public avatar.AvatarBodyDatas AvatarBodyDatas {get; }
    /// <summary>
    /// Avatar背部配置数据
    /// </summary>
    public avatar.AvatarBackDatas AvatarBackDatas {get; }
    /// <summary>
    /// Avatar头部数据
    /// </summary>
    public avatar.AvatarHeadDatas AvatarHeadDatas {get; }
    /// <summary>
    /// Avatar头发和五官数据
    /// </summary>
    public avatar.AvatarSenseDatas AvatarSenseDatas {get; }
    /// <summary>
    /// Avatar武器数据
    /// </summary>
    public avatar.AvatarWeaponDatas AvatarWeaponDatas {get; }

    public Tables(System.Func<string, ByteBuf> loader)
    {
        var tables = new System.Collections.Generic.Dictionary<string, object>();
        CommonConfigs = new common.CommonConfigs(loader("common_commonconfigs")); 
        tables.Add("common.CommonConfigs", CommonConfigs);
        GameMessages = new common.GameMessages(loader("common_gamemessages")); 
        tables.Add("common.GameMessages", GameMessages);
        GameMenus = new common.GameMenus(loader("common_gamemenus")); 
        tables.Add("common.GameMenus", GameMenus);
        NpcResourceDatas = new common.NpcResourceDatas(loader("common_npcresourcedatas")); 
        tables.Add("common.NpcResourceDatas", NpcResourceDatas);
        NpcTemplateDatas = new common.NpcTemplateDatas(loader("common_npctemplatedatas")); 
        tables.Add("common.NpcTemplateDatas", NpcTemplateDatas);
        LocalizationDatas = new common.LocalizationDatas(loader("common_localizationdatas")); 
        tables.Add("common.LocalizationDatas", LocalizationDatas);
        AudioConfigs = new common.AudioConfigs(loader("common_audioconfigs")); 
        tables.Add("common.AudioConfigs", AudioConfigs);
        AudioCatalogs = new common.AudioCatalogs(loader("common_audiocatalogs")); 
        tables.Add("common.AudioCatalogs", AudioCatalogs);
        GameItems = new common.GameItems(loader("common_gameitems")); 
        tables.Add("common.GameItems", GameItems);
        NpcFunctionTypes = new common.NpcFunctionTypes(loader("common_npcfunctiontypes")); 
        tables.Add("common.NpcFunctionTypes", NpcFunctionTypes);
        NpcFunctionDatas = new common.NpcFunctionDatas(loader("common_npcfunctiondatas")); 
        tables.Add("common.NpcFunctionDatas", NpcFunctionDatas);
        MonsterTypes = new common.MonsterTypes(loader("common_monstertypes")); 
        tables.Add("common.MonsterTypes", MonsterTypes);
        MapDatas = new map.MapDatas(loader("map_mapdatas")); 
        tables.Add("map.MapDatas", MapDatas);
        LevelUpTables = new attr.LevelUpTables(loader("attr_leveluptables")); 
        tables.Add("attr.LevelUpTables", LevelUpTables);
        AttrGrowTables = new attr.AttrGrowTables(loader("attr_attrgrowtables")); 
        tables.Add("attr.AttrGrowTables", AttrGrowTables);
        FormationDatas = new battle.FormationDatas(loader("battle_formationdatas")); 
        tables.Add("battle.FormationDatas", FormationDatas);
        PetDatas = new battle.PetDatas(loader("battle_petdatas")); 
        tables.Add("battle.PetDatas", PetDatas);
        MonsterDatas = new battle.MonsterDatas(loader("battle_monsterdatas")); 
        tables.Add("battle.MonsterDatas", MonsterDatas);
        MonsterGroupDatas = new battle.MonsterGroupDatas(loader("battle_monstergroupdatas")); 
        tables.Add("battle.MonsterGroupDatas", MonsterGroupDatas);
        SkillDatas = new battle.SkillDatas(loader("battle_skilldatas")); 
        tables.Add("battle.SkillDatas", SkillDatas);
        BuffDatas = new battle.BuffDatas(loader("battle_buffdatas")); 
        tables.Add("battle.BuffDatas", BuffDatas);
        VFXDatas = new battle.VFXDatas(loader("battle_vfxdatas")); 
        tables.Add("battle.VFXDatas", VFXDatas);
        ProjectileDatas = new battle.ProjectileDatas(loader("battle_projectiledatas")); 
        tables.Add("battle.ProjectileDatas", ProjectileDatas);
        CharacterDatas = new battle.CharacterDatas(loader("battle_characterdatas")); 
        tables.Add("battle.CharacterDatas", CharacterDatas);
        AvatarBodyDatas = new avatar.AvatarBodyDatas(loader("avatar_avatarbodydatas")); 
        tables.Add("avatar.AvatarBodyDatas", AvatarBodyDatas);
        AvatarBackDatas = new avatar.AvatarBackDatas(loader("avatar_avatarbackdatas")); 
        tables.Add("avatar.AvatarBackDatas", AvatarBackDatas);
        AvatarHeadDatas = new avatar.AvatarHeadDatas(loader("avatar_avatarheaddatas")); 
        tables.Add("avatar.AvatarHeadDatas", AvatarHeadDatas);
        AvatarSenseDatas = new avatar.AvatarSenseDatas(loader("avatar_avatarsensedatas")); 
        tables.Add("avatar.AvatarSenseDatas", AvatarSenseDatas);
        AvatarWeaponDatas = new avatar.AvatarWeaponDatas(loader("avatar_avatarweapondatas")); 
        tables.Add("avatar.AvatarWeaponDatas", AvatarWeaponDatas);

        PostInit();
        CommonConfigs.Resolve(tables); 
        GameMessages.Resolve(tables); 
        GameMenus.Resolve(tables); 
        NpcResourceDatas.Resolve(tables); 
        NpcTemplateDatas.Resolve(tables); 
        LocalizationDatas.Resolve(tables); 
        AudioConfigs.Resolve(tables); 
        AudioCatalogs.Resolve(tables); 
        GameItems.Resolve(tables); 
        NpcFunctionTypes.Resolve(tables); 
        NpcFunctionDatas.Resolve(tables); 
        MonsterTypes.Resolve(tables); 
        MapDatas.Resolve(tables); 
        LevelUpTables.Resolve(tables); 
        AttrGrowTables.Resolve(tables); 
        FormationDatas.Resolve(tables); 
        PetDatas.Resolve(tables); 
        MonsterDatas.Resolve(tables); 
        MonsterGroupDatas.Resolve(tables); 
        SkillDatas.Resolve(tables); 
        BuffDatas.Resolve(tables); 
        VFXDatas.Resolve(tables); 
        ProjectileDatas.Resolve(tables); 
        CharacterDatas.Resolve(tables); 
        AvatarBodyDatas.Resolve(tables); 
        AvatarBackDatas.Resolve(tables); 
        AvatarHeadDatas.Resolve(tables); 
        AvatarSenseDatas.Resolve(tables); 
        AvatarWeaponDatas.Resolve(tables); 
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        CommonConfigs.TranslateText(translator); 
        GameMessages.TranslateText(translator); 
        GameMenus.TranslateText(translator); 
        NpcResourceDatas.TranslateText(translator); 
        NpcTemplateDatas.TranslateText(translator); 
        LocalizationDatas.TranslateText(translator); 
        AudioConfigs.TranslateText(translator); 
        AudioCatalogs.TranslateText(translator); 
        GameItems.TranslateText(translator); 
        NpcFunctionTypes.TranslateText(translator); 
        NpcFunctionDatas.TranslateText(translator); 
        MonsterTypes.TranslateText(translator); 
        MapDatas.TranslateText(translator); 
        LevelUpTables.TranslateText(translator); 
        AttrGrowTables.TranslateText(translator); 
        FormationDatas.TranslateText(translator); 
        PetDatas.TranslateText(translator); 
        MonsterDatas.TranslateText(translator); 
        MonsterGroupDatas.TranslateText(translator); 
        SkillDatas.TranslateText(translator); 
        BuffDatas.TranslateText(translator); 
        VFXDatas.TranslateText(translator); 
        ProjectileDatas.TranslateText(translator); 
        CharacterDatas.TranslateText(translator); 
        AvatarBodyDatas.TranslateText(translator); 
        AvatarBackDatas.TranslateText(translator); 
        AvatarHeadDatas.TranslateText(translator); 
        AvatarSenseDatas.TranslateText(translator); 
        AvatarWeaponDatas.TranslateText(translator); 
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}