// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/WorldMessages/common/ArenaInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MetaVirus.Net.Messages.Common {

  /// <summary>Holder for reflection information generated from protos/WorldMessages/common/ArenaInfo.proto</summary>
  public static partial class ArenaInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/WorldMessages/common/ArenaInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArenaInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citwcm90b3MvV29ybGRNZXNzYWdlcy9jb21tb24vQXJlbmFJbmZvLnByb3Rv",
            "Eh1NZXRhVmlydXMuTmV0Lk1lc3NhZ2VzLkNvbW1vbiL9AQoLUEJBcmVuYUlu",
            "Zm8SFAoHYXJlbmFJZBgBIAEoBUgAiAEBEhEKBHJhbmsYAiABKAVIAYgBARIS",
            "CgVzY29yZRgDIAEoBUgCiAEBEhUKCHdpbkNvdW50GAQgASgFSAOIAQESFgoJ",
            "bG9zZUNvdW50GAUgASgFSASIAQESFgoJZHJhd0NvdW50GAYgASgFSAWIAQES",
            "FQoIc2Vhc29uTm8YByABKAVIBogBAUIKCghfYXJlbmFJZEIHCgVfcmFua0II",
            "CgZfc2NvcmVCCwoJX3dpbkNvdW50QgwKCl9sb3NlQ291bnRCDAoKX2RyYXdD",
            "b3VudEILCglfc2Vhc29uTm9COAokY29tLm1ldGF2aXJ1cy5uZXQubWVzc2Fn",
            "ZXMucGIuY29tbW9uQg5BcmVuYUluZm9QYk91dFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MetaVirus.Net.Messages.Common.PBArenaInfo), global::MetaVirus.Net.Messages.Common.PBArenaInfo.Parser, new[]{ "ArenaId", "Rank", "Score", "WinCount", "LoseCount", "DrawCount", "SeasonNo" }, new[]{ "ArenaId", "Rank", "Score", "WinCount", "LoseCount", "DrawCount", "SeasonNo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PBArenaInfo : pb::IMessage<PBArenaInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PBArenaInfo> _parser = new pb::MessageParser<PBArenaInfo>(() => new PBArenaInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PBArenaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MetaVirus.Net.Messages.Common.ArenaInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBArenaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBArenaInfo(PBArenaInfo other) : this() {
      _hasBits0 = other._hasBits0;
      arenaId_ = other.arenaId_;
      rank_ = other.rank_;
      score_ = other.score_;
      winCount_ = other.winCount_;
      loseCount_ = other.loseCount_;
      drawCount_ = other.drawCount_;
      seasonNo_ = other.seasonNo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PBArenaInfo Clone() {
      return new PBArenaInfo(this);
    }

    /// <summary>Field number for the "arenaId" field.</summary>
    public const int ArenaIdFieldNumber = 1;
    private int arenaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArenaId {
      get { if ((_hasBits0 & 1) != 0) { return arenaId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        arenaId_ = value;
      }
    }
    /// <summary>Gets whether the "arenaId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArenaId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "arenaId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearArenaId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rank {
      get { if ((_hasBits0 & 2) != 0) { return rank_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        rank_ = value;
      }
    }
    /// <summary>Gets whether the "rank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRank {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRank() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Score {
      get { if ((_hasBits0 & 4) != 0) { return score_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        score_ = value;
      }
    }
    /// <summary>Gets whether the "score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScore {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScore() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "winCount" field.</summary>
    public const int WinCountFieldNumber = 4;
    private int winCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinCount {
      get { if ((_hasBits0 & 8) != 0) { return winCount_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        winCount_ = value;
      }
    }
    /// <summary>Gets whether the "winCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "winCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "loseCount" field.</summary>
    public const int LoseCountFieldNumber = 5;
    private int loseCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LoseCount {
      get { if ((_hasBits0 & 16) != 0) { return loseCount_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        loseCount_ = value;
      }
    }
    /// <summary>Gets whether the "loseCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoseCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "loseCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoseCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "drawCount" field.</summary>
    public const int DrawCountFieldNumber = 6;
    private int drawCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DrawCount {
      get { if ((_hasBits0 & 32) != 0) { return drawCount_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        drawCount_ = value;
      }
    }
    /// <summary>Gets whether the "drawCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawCount {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "drawCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawCount() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "seasonNo" field.</summary>
    public const int SeasonNoFieldNumber = 7;
    private int seasonNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SeasonNo {
      get { if ((_hasBits0 & 64) != 0) { return seasonNo_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        seasonNo_ = value;
      }
    }
    /// <summary>Gets whether the "seasonNo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeasonNo {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "seasonNo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeasonNo() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PBArenaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PBArenaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArenaId != other.ArenaId) return false;
      if (Rank != other.Rank) return false;
      if (Score != other.Score) return false;
      if (WinCount != other.WinCount) return false;
      if (LoseCount != other.LoseCount) return false;
      if (DrawCount != other.DrawCount) return false;
      if (SeasonNo != other.SeasonNo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasArenaId) hash ^= ArenaId.GetHashCode();
      if (HasRank) hash ^= Rank.GetHashCode();
      if (HasScore) hash ^= Score.GetHashCode();
      if (HasWinCount) hash ^= WinCount.GetHashCode();
      if (HasLoseCount) hash ^= LoseCount.GetHashCode();
      if (HasDrawCount) hash ^= DrawCount.GetHashCode();
      if (HasSeasonNo) hash ^= SeasonNo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasArenaId) {
        output.WriteRawTag(8);
        output.WriteInt32(ArenaId);
      }
      if (HasRank) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (HasWinCount) {
        output.WriteRawTag(32);
        output.WriteInt32(WinCount);
      }
      if (HasLoseCount) {
        output.WriteRawTag(40);
        output.WriteInt32(LoseCount);
      }
      if (HasDrawCount) {
        output.WriteRawTag(48);
        output.WriteInt32(DrawCount);
      }
      if (HasSeasonNo) {
        output.WriteRawTag(56);
        output.WriteInt32(SeasonNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasArenaId) {
        output.WriteRawTag(8);
        output.WriteInt32(ArenaId);
      }
      if (HasRank) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (HasScore) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (HasWinCount) {
        output.WriteRawTag(32);
        output.WriteInt32(WinCount);
      }
      if (HasLoseCount) {
        output.WriteRawTag(40);
        output.WriteInt32(LoseCount);
      }
      if (HasDrawCount) {
        output.WriteRawTag(48);
        output.WriteInt32(DrawCount);
      }
      if (HasSeasonNo) {
        output.WriteRawTag(56);
        output.WriteInt32(SeasonNo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasArenaId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaId);
      }
      if (HasRank) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HasScore) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HasWinCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
      }
      if (HasLoseCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseCount);
      }
      if (HasDrawCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawCount);
      }
      if (HasSeasonNo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonNo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PBArenaInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasArenaId) {
        ArenaId = other.ArenaId;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasWinCount) {
        WinCount = other.WinCount;
      }
      if (other.HasLoseCount) {
        LoseCount = other.LoseCount;
      }
      if (other.HasDrawCount) {
        DrawCount = other.DrawCount;
      }
      if (other.HasSeasonNo) {
        SeasonNo = other.SeasonNo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArenaId = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            WinCount = input.ReadInt32();
            break;
          }
          case 40: {
            LoseCount = input.ReadInt32();
            break;
          }
          case 48: {
            DrawCount = input.ReadInt32();
            break;
          }
          case 56: {
            SeasonNo = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ArenaId = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            WinCount = input.ReadInt32();
            break;
          }
          case 40: {
            LoseCount = input.ReadInt32();
            break;
          }
          case 48: {
            DrawCount = input.ReadInt32();
            break;
          }
          case 56: {
            SeasonNo = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
